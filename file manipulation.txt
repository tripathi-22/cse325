// Exercise 1: Write a program in C that creates a file called "output.txt", 
// writes the text "Hello, World!" to it, and then closes the file.

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>

void exercise1() {
    int fd = open("output.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd < 0) {
        perror("open");
        exit(1);
    }
    const char *msg = "Hello, World!";
    write(fd, msg, strlen(msg));
    close(fd);
}

// Exercise 2: Write a program in C that reads the contents of a file called "input.txt" 
// and writes them to a new file called "output.txt". 
// You should use system calls like open(), read(), and write().

void exercise2() {
    char buffer[1024];
    int input_fd = open("input.txt", O_RDONLY);
    if (input_fd < 0) {
        perror("open input.txt");
        exit(1);
    }

    int output_fd = open("output.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (output_fd < 0) {
        perror("open output.txt");
        close(input_fd);
        exit(1);
    }

    ssize_t bytesRead;
    while ((bytesRead = read(input_fd, buffer, sizeof(buffer))) > 0) {
        write(output_fd, buffer, bytesRead);
    }

    close(input_fd);
    close(output_fd);
}

// Exercise 3: Write a program in C that reads a file called "input.txt" 
// and counts the number of lines in the file. 
// You should use system calls like open(), read(), and write().

void exercise3() {
    char buffer[1024];
    int fd = open("input.txt", O_RDONLY);
    if (fd < 0) {
        perror("open");
        exit(1);
    }

    ssize_t bytesRead;
    int lineCount = 0;
    while ((bytesRead = read(fd, buffer, sizeof(buffer))) > 0) {
        for (ssize_t i = 0; i < bytesRead; i++) {
            if (buffer[i] == '\n') {
                lineCount++;
            }
        }
    }

    close(fd);
    printf("Total lines: %d\n", lineCount);
}

// Exercise 4:
// I. Write a C program that creates a file called "numbers.txt" and writes 100 integers to it, one per line.
// II. Using the lseek system call, move the file pointer to the beginning of the file.
// III. Read the first 10 integers from the file and print them to the console.

void exercise4() {
    int fd = open("numbers.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd < 0) {
        perror("open for write");
        exit(1);
    }

    char num[16];
    for (int i = 1; i <= 100; i++) {
        snprintf(num, sizeof(num), "%d\n", i);
        write(fd, num, strlen(num));
    }

    close(fd);

    fd = open("numbers.txt", O_RDONLY);
    if (fd < 0) {
        perror("open for read");
        exit(1);
    }

    lseek(fd, 0, SEEK_SET); // Move file pointer to the beginning

    char ch;
    int count = 0;
    printf("First 10 integers from file:\n");
    while (read(fd, &ch, 1) > 0 && count < 10) {
        write(STDOUT_FILENO, &ch, 1);
        if (ch == '\n') {
            count++;
        }
    }

    close(fd);
}

int main() {
    printf("Running Exercise 1...\n");
    exercise1();
    printf("Exercise 1 complete: 'output.txt' created with message.\n\n");

    printf("Running Exercise 2...\n");
    exercise2();
    printf("Exercise 2 complete: 'input.txt' copied to 'output.txt'.\n\n");

    printf("Running Exercise 3...\n");
    exercise3();
    printf("\nExercise 3 complete: Line count printed.\n\n");

    printf("Running Exercise 4...\n");
    exercise4();
    printf("\nExercise 4 complete: First 10 integers printed from 'numbers.txt'.\n");

    return 0;
}
